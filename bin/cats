#! /usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'

require 'json'
require 'logger'
require 'open-uri'
require 'redis'
require 'twilio-ruby'

TWILLIO_ACCOUNT_SID = ENV.fetch('TWILLIO_ACCOUNT_SID') { abort('Missing TWILLIO_ACCOUNT_SID config') }
TWILLIO_AUTH_TOKEN = ENV.fetch('TWILLIO_AUTH_TOKEN') { abort('Missing TWILLIO_AUTH_TOKEN config') }
TWILLIO_FROM = ENV.fetch('TWILLIO_FROM') { abort('Missing TWILLIO_FROM config') }
TWILLIO_TO = ENV.fetch('TWILLIO_TO') { abort('Missing TWILLIO_TO config') }

battersea = URI.open('https://www.battersea.org.uk/api/animals/cats')
logger = Logger.new(STDOUT)
redis = Redis.new
twillio = Twilio::REST::Client.new(TWILLIO_ACCOUNT_SID, TWILLIO_AUTH_TOKEN)

api = JSON.parse(battersea.read)

cats = api
         .fetch('animals')
         .values
         .select { |animal| animal['field_animal_centre'] == 'old windsor' }

logger.info 'Found %s cat(s)' % cats.size

redis.sadd 'reserved_cats', cats
                              .select { |cat| cat['field_animal_reserved'] == 'Reserved' }
                              .map { |cat| cat['nid'] }

redis.sadd 'rehomed_cats', cats
                             .select { |cat| cat['field_animal_rehomed'] == 'Rehomed' }
                             .map { |cat| cat['nid'] }

redis.sinter('available_cats', 'reserved_cats').each { |cat| redis.smove('available_cats', 'reserved_cats', cat) }
redis.sinter('reserved_cats', 'rehomed_cats').each { |cat| redis.smove('reserved_cats', 'rehomed_cats', cat) }

available_cats = cats
                   .reject { |cat| redis.sunion('reserved_cats', 'rehomed_cats').include?(String(cat['nid'])) }

new_cats = available_cats
             .reject { |cat| redis.smembers('available_cats').include?(String(cat['nid'])) }

redis.sadd 'available_cats', available_cats.map { |cat| cat['nid'] }

new_cats.each do |cat|
  logger.info 'Sending alert for %s' % cat['title']

  message_body = <<~MESSAGE
    New cat alert!

    #{cat['title']} â€“ #{URI.join('https://www.battersea.org.uk', cat['path'])}
  MESSAGE

  message = twillio.messages.create(
    from: TWILLIO_FROM,
    to: TWILLIO_TO,
    body: message_body
  )

  logger.info '-> Message %s sent' % message.sid
end
