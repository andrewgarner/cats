#! /usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'

require 'json'
require 'logger'
require 'open-uri'
require 'redis'
require 'twilio-ruby'

TWILLIO_ACCOUNT_SID = ENV.fetch('TWILLIO_ACCOUNT_SID') { abort('Missing TWILLIO_ACCOUNT_SID config') }
TWILLIO_AUTH_TOKEN = ENV.fetch('TWILLIO_AUTH_TOKEN') { abort('Missing TWILLIO_AUTH_TOKEN config') }
TWILLIO_FROM = ENV.fetch('TWILLIO_FROM') { abort('Missing TWILLIO_FROM config') }
TWILLIO_TO = ENV.fetch('TWILLIO_TO') { abort('Missing TWILLIO_TO config') }

battersea = URI.open('https://www.battersea.org.uk/api/animals/cats')
logger = Logger.new(STDOUT)
redis = Redis.new
twillio = Twilio::REST::Client.new(TWILLIO_ACCOUNT_SID, TWILLIO_AUTH_TOKEN)

api = JSON.parse(battersea.read)

cats = api
         .fetch('animals')
         .values
         .select { |animal| animal['field_animal_centre'] == 'old windsor' }
         .reject { |old_windsor_cat| redis.sismember('cats', old_windsor_cat.fetch('nid')) }

first_run = redis.smembers('cats').empty?

logger.info 'Found %s cat(s)' % cats.size

if cats.any?
  redis.sadd('cats', cats.map { |c| c.fetch('nid') })

  if !first_run
    cats.each do |cat|
      logger.info 'Sending alert for %s' % cat['title']


      message_body = <<~MESSAGE
      New cat alert!

      #{cat['title']} â€“ #{URI.join('https://www.battersea.org.uk', cat['path'])}
      MESSAGE

      message = twillio.messages.create(
        from: TWILLIO_FROM,
        to: TWILLIO_TO,
        body: message_body
      )

      logger.info '-> Message %s sent' % message.sid
    end
  end
end
